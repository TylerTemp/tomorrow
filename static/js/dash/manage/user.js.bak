$(document).ready(function()
{
  // the default $().button will cause the button invisiable in middle
  // size screen, why?
  $.fn.btn = function(status)
  {
    var attr = eval('(' + this.data('am-loading') + ')');
    switch (status) {
      case 'loading':
        if (this.hasClass('am-loading'))
          break;
        attr.source = this.html();
        var html = '<i class="am-icon-{0} {1}"></i>{2}'.format(
          attr.spinner, (attr.pause? 'am-icon-pulse': ''), (attr.loadingText || '')
        );
        this.html(html).
          addClass('am-loading');
        this.data('am-loading', attr.toSource());
        break;
      case 'reset':
        if (!this.hasClass('am-loading'))
          break;
        var html = attr.resetText || attr.source;
        this.html(html).
          removeClass('am-loading');
        break;
    }
    return this;
  };

  $('[data-role="user-panel"]').each(function(index, element)
  {
    var $panel = $(this);
    var id = $panel.data('id');
    var $form = $panel.find('form');
    var $avatar_input = $panel.find('input[name="avatar"]');
    var $avatar_img = $panel.find('img');
    var $change_pwd_chk = $panel.find('input[name="change_pwd"]');
    var $change_pwd_input = $panel.find('input[name="pwd"]');
    var $repwd_input = $panel.find('input[name="repwd"]');
    var $repwd_panel = $panel.find('[data-role="repwd-error"]');
    var check_pwd = function()
    {
      var need_check = $change_pwd_chk.prop('checked');
      if (need_check)
      {
        var pwd = $change_pwd_input.val();
        var $group = $change_pwd_input.closest('.am-form-group');
        var $alert = $group.find('.am-icon-warning');

        if (!$alert.length)
          $alert = $('<span class="am-text-warning am-icon-warning"> </span>').hide().
            appendTo($group);

        if (pwd.length < PWD_MIN_LENGTH)
        {
          $group.removeClass('am-form-success').addClass('am-form-error');
          $alert.html(' ' + _('Password should not be less than {0} words').format(PWD_MIN_LENGTH)).show();
          return false;
        }
        $alert.hide();
        $group.removeClass('am-form-error').addClass('am-form-success');
        return true;
      }
      $alert.hide();
      $group.removeClass('am-form-error');
      return true;
    }

    var check_repwd = function()
    {
      var pwd = $change_pwd_input.val();
      var repwd = $repwd_input.val();
      var need_chk = $change_pwd_chk.prop('checked');
      if (need_chk && pwd && (repwd != pwd))
        $repwd_panel.
          show(200).
          css('display', 'block').
          html(
            ' ' + _('You need to enter the same password, you know that')
          ).
          parent().addClass('am-form-warning').removeClass('am-form-success');
      else
        $repwd_panel.hide(100).parent().removeClass('am-form-warning');

      if (pwd && (pwd == repwd))
        $repwd_panel.parent().addClass('am-form-success');
    }
    $panel.find("form").validator(
    {
      onValid: function(validity)
      {
        $(validity.field).closest('.am-form-group').find('.am-icon-warning').hide();
      },

      onInValid: function(validity)
      {
        var $field = $(validity.field);
        var name = $field.prop('name');
        var $group = $field.closest('.am-form-group');
        var $alert = $group.find('.am-icon-warning');
        var msg = undefined;
        if (name == 'user')
        {
          var val = $field.val();
          // why I can't get minlength?
          var min = $field.prop('minlength') || parseInt($field.data('min-length'));
          var max = $field.prop('maxlength')
          if (validity.patternMismatch)
          {
            if (val.length < min)
              msg = _('User Name should not shorter than {0} characters').format(min);
            else if (val.length > max)
              msg = _('User Name should not longer than {0} characters').format(max);
            else if (val == '..')
              msg = _("User Name should not be '..'");
            else
              msg = _('User Name should only contain English characters, Chinese characters, number, space, underbar, minus, dot');
          }
        }
        else if (name == 'email')
        {
          if (validity.valueMissing)
            msg = _('Email should not be empty');
          else if (validity.patternMismatch)
            msg = _('Hey, we only accept email address from earth');
        }
        if (!msg)
          msg = $field.data('validationMessage') || this.getValidationMessage(validity);

        if (!$alert.length)
        {
          $alert = $('<span class="am-text-warning am-icon-warning"> </span>').hide().
            appendTo($group);
        }
        $alert.html(msg).show();
      }
    });
    $repwd_input.on('input', check_repwd);
    $change_pwd_input.blur(check_repwd);
    $avatar_input.blur(function(evt)
    {
      var url = $(this).val() || '/static/img/user.jpg';
      $avatar_img.prop('src', url);
    });
    $change_pwd_chk.change(function(evt)
    {
      var is_chked = $(this).prop('checked');
      $change_pwd_input.prop('disabled', (!is_chked)).focus();
      if (is_chked)
      {
        $change_pwd_input.val('').
          on('input', check_pwd);
        $panel.find('[data-role="repwd"]').show(200);
      }
      else
      {
        $change_pwd_input.val($change_pwd_input.data('pwd') || '').
          off('input', check_pwd);
        $panel.find('[data-role="repwd"]').hide(200);
      }
    });
    $panel.find('button[data-role="delete"]').click(function(evt)
    {
      evt.preventDefault();
      var $btn = $(this);
      if ($btn.hasClass('am-loading'))
        return false;
      var id = $(this).data('id');
      var action = 'delete';
      $btn.btn('loading');
      setTimeout(function(){
        $btn.btn('reset');
      }, 500);
    });
  });
});
